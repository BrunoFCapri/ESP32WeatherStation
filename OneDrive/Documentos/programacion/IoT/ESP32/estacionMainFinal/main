import network
import socket
from time import sleep, ticks_ms
import machine
import select
import ujson
from dht import DHT22

# Configuración de pines
LED_PIN = 2
DHT_PIN = 13
led = machine.Pin(LED_PIN, machine.Pin.OUT)
dht_sensor = DHT22(machine.Pin(DHT_PIN))
boot_button = machine.Pin(0, machine.Pin.IN)

# Frecuencia de lectura inicial en milisegundos (10 segundos)
reading_frequency = 10000
last_reading_time = 0
humidity = -1.0
temperature = -1.0

# Intenta cargar las credenciales de Wi-Fi guardadas
def load_credentials():
    try:
        with open('wifi.txt', 'r') as f:
            ssid = f.readline().strip()
            password = f.readline().strip()
            return ssid, password
    except OSError:
        return None, None

def do_connect():
    """Intenta conectar a una red Wi-Fi."""
    global led, temperature, humidity

    ssid, password = load_credentials()
    if not ssid or not password:
        print("No se encontraron credenciales. Iniciando modo AP.")
        return False

    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)

    if not wlan.isconnected():
        print(f'Conectando a la red: {ssid}')
        wlan.connect(ssid, password)

        max_wait = 20
        while max_wait > 0 and not wlan.isconnected():
            led.value(not led.value()) # Parpadea el LED
            sleep(0.5)
            max_wait -= 1

    if wlan.isconnected():
        print('Conexión exitosa!')
        print('Configuración de red:', wlan.ifconfig())
        led.value(1)  # Enciende el LED de forma continua
        return True
    else:
        print("No se pudo conectar. Iniciando el punto de acceso para reconfiguración.")
        led.value(0)
        return False

def do_ap_mode():
    """Configura el ESP32 como punto de acceso y hostea el portal cautivo."""
    ap = network.WLAN(network.AP_IF)
    ap.active(True)
    ap.config(essid='ESP32-CONFIG', password='micropython')
    print('Punto de acceso activado. Conectate a "ESP32-CONFIG"')
    print('Dirección IP del AP:', ap.ifconfig()[0])
    
    web_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    web_server.bind(('', 80))
    web_server.listen(5)

    html = """
    <html>
        <head>
            <title>Configuracion de WiFi</title>
            <style>
                body { font-family: sans-serif; text-align: center; background: #f0f2f5; }
                .container { max-width: 400px; margin: 50px auto; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
                h2 { color: #333; }
                input { width: 90%; padding: 10px; margin: 5px 0; border: 1px solid #ccc; border-radius: 5px; }
                button { padding: 10px 20px; font-size: 16px; color: white; background: #007bff; border: none; border-radius: 5px; cursor: pointer; }
            </style>
        </head>
        <body>
            <div class="container">
                <h2>Configuracion de WiFi</h2>
                <form action="/config">
                    <input type="text" name="ssid" placeholder="Nombre de la red (SSID)"><br>
                    <input type="password" name="password" placeholder="Contraseña"><br>
                    <button type="submit">Conectar</button>
                </form>
            </div>
        </body>
    </html>
    """
    
    while True:
        try:
            conn, addr = web_server.accept()
            request = conn.recv(1024)
            request = str(request)
            
            if "GET /config" in request:
                conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n')
                conn.send('<h1>Credenciales guardadas! Reiniciando...</h1><p>Por favor, espere.</p>')
                
                ssid_start = request.find("ssid=") + 5
                ssid_end = request.find("&", ssid_start)
                new_ssid = request[ssid_start:ssid_end].replace('%20', ' ').replace('+', ' ')
                
                password_start = request.find("password=") + 9
                password_end = request.find(" ", password_start)
                new_password = request[password_start:password_end].replace('%20', ' ').replace('+', ' ')

                with open('wifi.txt', 'w') as f:
                    f.write(new_ssid + '\n')
                    f.write(new_password + '\n')
                
                print("Credenciales guardadas. Reiniciando...")
                sleep(2)
                machine.reset()
            else:
                conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n')
                conn.send(html)

            conn.close()
        except OSError:
            pass

def read_dht():
    """Lee la temperatura y humedad del sensor DHT22."""
    global temperature, humidity
    try:
        dht_sensor.measure()
        temperature = dht_sensor.temperature()
        humidity = dht_sensor.humidity()
        print(f"Temperatura: {temperature} C, Humedad: {humidity} %")
    except OSError as e:
        print(f"Error al leer el sensor DHT: {e}")
        temperature = -1.0
        humidity = -1.0

def start_api_server():
    """Inicia el servidor web para la API RESTful."""
    global temperature, humidity, reading_frequency

    addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]
    api_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    api_server.bind(addr)
    api_server.listen(5)
    print("Servidor API RESTful iniciado.")

    while True:
        current_time = ticks_ms()
        if ticks_ms() - last_reading_time >= reading_frequency:
            read_dht()
            last_reading_time = ticks_ms()
            
        try:
            conn, addr = api_server.accept()
            request = conn.recv(1024)
            request_str = request.decode('utf-8')

            # Maneja la ruta /data
            if "GET /data" in request_str:
                response_data = {"temperature": temperature, "humidity": humidity}
                response_json = ujson.dumps(response_data)
                conn.send('HTTP/1.1 200 OK\nContent-Type: application/json\n\n')
                conn.send(response_json)
            
            # Maneja la ruta /set_freq
            elif "GET /set_freq?" in request_str:
                query_params = request_str.split("?")[1]
                params = dict(param.split("=") for param in query_params.split("&"))
                if "freq" in params:
                    try:
                        new_freq = int(params["freq"])
                        reading_frequency = max(new_freq, 1000) # Frecuencia minima de 1 segundo
                        conn.send('HTTP/1.1 200 OK\nContent-Type: text/plain\n\n')
                        conn.send(f"Frecuencia de lectura actualizada a {reading_frequency} ms.")
                    except ValueError:
                        conn.send('HTTP/1.1 400 Bad Request\nContent-Type: text/plain\n\n')
                        conn.send("Error: 'freq' debe ser un numero entero.")
                else:
                    conn.send('HTTP/1.1 400 Bad Request\nContent-Type: text/plain\n\n')
                    conn.send("Error: Parametro 'freq' no encontrado.")
            
            # Maneja la ruta raiz y otras
            else:
                conn.send('HTTP/1.1 200 OK\nContent-Type: text/plain\n\n')
                conn.send("API RESTful ESP32 para Estacion Meteorologica")

            conn.close()
        except OSError:
            pass

# Lógica principal del programa
if __name__ == "__main__":
    if not do_connect():
        do_ap_mode()
    else:
        start_api_server()