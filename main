import network
import socket
from time import sleep, ticks_ms
import machine
import ujson
from dht import DHT22
import urequests

# Configuración de pines
LED_PIN = 2
DHT_PIN = 13
led = machine.Pin(LED_PIN, machine.Pin.OUT)
dht_sensor = DHT22(machine.Pin(DHT_PIN))

# Frecuencia de lectura y envío en milisegundos
reading_frequency = 300000 # Envío cada 5 minutos
last_reading_time = 0
humidity = -1.0
temperature = -1.0

# Credenciales de Supabase
supabase_url = "xxxxx"
supabase_key = "xxxxx"
supabase_insert_url = supabase_url + "/rest/v1/readings"

# --- Funciones de tu código ---
def do_ap_mode():
    """Configura el ESP32 como punto de acceso y hostea el portal cautivo."""
    ap = network.WLAN(network.AP_IF)
    ap.active(True)
    ap.config(essid='ESP32-CONFIG', password='micropython')
    print('Punto de acceso activado. Conectate a "ESP32-CONFIG"')
    print('Dirección IP del AP:', ap.ifconfig()[0])

    web_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    web_server.bind(('', 80))
    web_server.listen(5)
    html = """
    <html>
        <head>
            <title>Configuracion de WiFi</title>
            <style>
                body { font-family: sans-serif; text-align: center; background: #f0f2f5; }
                .container { max-width: 400px; margin: 50px auto; padding: 20px; background: white; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
                h2 { color: #333; }
                input { width: 90%; padding: 10px; margin: 5px 0; border: 1px solid #ccc; border-radius: 5px; }
                button { padding: 10px 20px; font-size: 16px; color: white; background: #007bff; border: none; border-radius: 5px; cursor: pointer; }
            </style>
        </head>
        <body>
            <div class="container">
                <h2>Configuracion de WiFi</h2>
                <form action="/config">
                    <input type="text" name="ssid" placeholder="Nombre de la red (SSID)"><br>
                    <input type="password" name="password" placeholder="password"><br>
                    <button type="submit">Conectar</button>
                </form>
            </div>
        </body>
    </html>
    """

    while True:
        try:
            conn, addr = web_server.accept()
            request = conn.recv(1024)
            request = str(request)

            if "GET /config" in request:
                conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n')
                conn.send('<h1>Credenciales guardadas! Reiniciando...</h1><p>Por favor, espere.</p>')

                ssid_start = request.find("ssid=") + 5
                ssid_end = request.find("&", ssid_start)
                new_ssid = request[ssid_start:ssid_end].replace('%20', ' ').replace('+', ' ')

                password_start = request.find("password=") + 9
                password_end = request.find(" ", password_start)
                new_password = request[password_start:password_end].replace('%20', ' ').replace('+', ' ')
                with open('wifi.txt', 'w') as f:
                    f.write(new_ssid + '\n')
                    f.write(new_password + '\n')

                print("Credenciales guardadas. Reiniciando...")
                sleep(2)
                machine.reset()
            else:
                conn.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n')
                conn.send(html)
            conn.close()
        except OSError:
            pass

def read_dht():
    """Lee la temperatura y humedad del sensor DHT22."""
    global temperature, humidity
    try:
        dht_sensor.measure()
        temperature = dht_sensor.temperature()
        humidity = dht_sensor.humidity()
        print(f"Temperatura: {temperature} C, Humedad: {humidity} %")
    except OSError as e:
        print(f"Error al leer el sensor DHT: {e}")
        temperature = -1.0
        humidity = -1.0

# --- Nueva función para enviar datos a Supabase ---
def send_to_supabase(temp, hum):
    """Envía los datos de temperatura y humedad a Supabase."""
    print("Enviando datos a Supabase...")
    headers = {
        "apikey": supabase_key,
        "Authorization": f"Bearer {supabase_key}",
        "Content-Type": "application/json"
    }
    data = ujson.dumps({"temperature": temp, "humidity": hum})

    try:
        response = urequests.post(supabase_insert_url, headers=headers, data=data)
        print(f"Código de respuesta HTTP: {response.status_code}")
        response.close()
    except Exception as e:
        print(f"Error al enviar datos a Supabase: {e}")

# --- Lógica principal del programa ---
if __name__ == "__main__":
    wlan = network.WLAN(network.STA_IF)
    if not wlan.isconnected():
        do_ap_mode()
    else:
        # Se inicializa el servidor web solo una vez y se hace no bloqueante.
        addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]
        api_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        api_server.bind(addr)
        api_server.listen(1)
        api_server.setblocking(False)

        while True:
            # Lógica para leer el sensor y enviar datos a Supabase
            current_time = ticks_ms()
            if current_time - last_reading_time >= reading_frequency:
                read_dht()
                if temperature != -1.0 and humidity != -1.0:
                    send_to_supabase(temperature, humidity)
                last_reading_time = current_time

            
            try:
                conn, addr = api_server.accept()
                req = conn.recv(1024)
                req_str = req.decode('utf-8')
                
                if "GET /data" in req_str:
                    response_data = {"temperature": temperature, "humidity": humidity}
                    response_json = ujson.dumps(response_data)
                    conn.send(b'HTTP/1.1 200 OK\nContent-Type: application/json\n\n')
                    conn.send(response_json)
                conn.close()
            except OSError:
                # Esto es normal cuando no hay conexiones entrantes, se ignora
                pass
            
            sleep(0.1)
