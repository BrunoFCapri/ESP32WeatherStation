# üìò Documentaci√≥n de Arquitectura ‚Äì Proyecto de Sensado con Supabase + DB Serie Temporal

## üéØ Objetivo

Dise√±ar una arquitectura eficiente y optimizada para almacenar, procesar y consultar mediciones de **temperatura y humedad** enviadas por sensores.
La arquitectura debe:

* Mantener en **Supabase** solo la informaci√≥n m√≠nima necesaria para consultas r√°pidas desde la web.
* Delegar el historial completo a una **base de datos de series temporales** (compatible con protocolo S3).
* Utilizar una **API intermedia (Edge Functions en Supabase)** para centralizar la l√≥gica de inserci√≥n y consulta.

---

## üèóÔ∏è Flujo de Datos

### 1. Ingreso de datos (desde la placa al backend)

1. La **placa** env√≠a una medici√≥n (temperatura, humedad, timestamp).
2. Esta solicitud va a la **API intermedia (Edge Function en Supabase)**.
3. La funci√≥n ejecuta:

   * Actualiza/‚Äúpisa‚Äù la fila del d√≠a actual en Supabase:

     * `promedio_temperatura` ‚Üí valor actual hasta el cierre del d√≠a.
     * `minimo_temperatura` ‚Üí se actualiza si el nuevo valor es menor.
     * `promedio_humedad` ‚Üí valor actual hasta el cierre del d√≠a.
   * Inserta la medici√≥n **cruda** en la base de series temporales v√≠a S3.

---

### 2. Procesamiento al final del d√≠a

* Un **cron job** o funci√≥n programada se ejecuta al cierre del d√≠a.
* Recalcula el **promedio real** de temperatura y humedad del d√≠a desde la base de series temporales.
* Actualiza en Supabase la fila del d√≠a con ese promedio definitivo.

---

### 3. Consultas desde la web

1. La **web** no accede directo a Supabase, sino que consume la **API intermedia**.
2. La API ofrece dos endpoints:

   * **Consulta r√°pida (diaria o actual):** obtiene de Supabase el valor del d√≠a actual (dato actual) o de d√≠as anteriores (promedio + m√≠nimo).
   * **Consulta hist√≥rica detallada:** redirige la petici√≥n a la base de series temporales v√≠a S3 para traer datos completos (ej. gr√°fico de la √∫ltima semana).

---

## üìÇ Tablas y Estructuras

### En **Supabase**

**Tabla: `resumen_dia`**

| fecha (DATE) | promedio\_temperatura (FLOAT) | minimo\_temperatura (FLOAT) | promedio\_humedad (FLOAT) |
| ------------ | ----------------------------- | --------------------------- | ------------------------- |

* Solo un registro por fecha.
* Durante el d√≠a se va actualizando con los valores actuales.
* Al cierre se recalcula con el promedio real.

---

### En **DB Serie Temporal (via S3)**

**Tabla: `readings`**
\| timestamp (TIMESTAMPTZ) | temperatura (FLOAT) | humedad (FLOAT) |

* Guarda cada lectura sin procesar.
* Escalable para hist√≥ricos grandes.
* Sirve de base para promedios y gr√°ficos detallados.

---

## ‚öôÔ∏è API Intermedia (Edge Functions en Supabase)

### Endpoints propuestos

* **POST `/api/ingest`**
  Recibe datos de la placa.

  * Valida payload.
  * Actualiza `resumen_dia` en Supabase.
  * Inserta registro en `readings` (serie temporal).

* **GET `/api/data/daily?fecha=YYYY-MM-DD`**
  Devuelve los datos consolidados de un d√≠a espec√≠fico desde Supabase.

* **GET `/api/data/historical?from=YYYY-MM-DD&to=YYYY-MM-DD`**
  Devuelve datos crudos desde la DB de series temporales (para gr√°ficas detalladas).

---

## ‚úÖ Ventajas de esta Arquitectura

* **R√°pida**: consultas comunes (d√≠a actual o hist√≥ricos diarios) van directo a Supabase.
* **Escalable**: hist√≥ricos completos se guardan en una DB optimizada para series temporales.
* **Econ√≥mica**: Supabase solo almacena un registro por d√≠a.
* **Segura**: tanto la placa como la web consumen la misma API, sin exponer directamente las bases.
